"""
Django settings for oj project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""
import os
import raven
from copy import deepcopy
from utils.shortcuts import get_env

'''根据环境变量 "OJ_ENV" 的值来确定是否处于生产环境。如果环境变量的值是 "production"，则设置 production_env 为 True，否则为 False。'''
production_env = get_env("OJ_ENV", "dev") == "production"
if production_env:
    from .production_settings import *
else:
    from .dev_settings import *

with open(os.path.join(DATA_DIR, "config", "secret.key"), "r") as f:
    SECRET_KEY = f.read()

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 包含了一组第三方应用程序的列表，这些应用程序是Django的标准库以及其他第三方库，包括用户认证、会话管理、静态文件处理、REST框架等
VENDOR_APPS = [
    'django.contrib.auth',
    'django.contrib.sessions',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_dramatiq',
    'django_dbconn_retry',
]

if production_env:
    VENDOR_APPS.append('raven.contrib.django.raven_compat')

# 包含了自定义应用程序的列表，这些应用程序是项目中定义的本地应用程序。
LOCAL_APPS = [
    'account',
    'announcement',
    'conf',
    'problem',
    'contest',
    'utils',
    'submission',
    'options',
    'judge',
]
# 包含了所有已安装应用程序的列表，将 VENDOR_APPS 和 LOCAL_APPS 合并在一起。
INSTALLED_APPS = VENDOR_APPS + LOCAL_APPS

MIDDLEWARE = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'account.middleware.APITokenAuthMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'account.middleware.AdminRoleRequiredMiddleware',
    'account.middleware.SessionRecordMiddleware',
    # 'account.middleware.LogSqlMiddleware',
)
ROOT_URLCONF = 'oj.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
WSGI_APPLICATION = 'oj.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

# 自定义用户模型的配置
AUTH_PASSWORD_VALIDATORS = [
    {
        # 检查密码与用户属性的相似性，例如用户名、电子邮件地址等
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        # 检查密码的最小长度
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        # 检查密码是否为常见密码，例如字典中的单词或常见的短语
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        # 检查密码中是否包含数字。
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/
"""作用：指定项目的默认语言代码。
示例：'en-us' 表示英语（美国）"""
LANGUAGE_CODE = 'en-us'

"""作用：指定项目的默认时区。
示例：'UTC' 表示协调世界时，你可以根据项目需求设置为其他时区"""
TIME_ZONE = 'UTC'

"""作用：启用或禁用国际化（Internationalization，简称 i18n）。
如果设置为 True，Django 将启用对多语言的支持。这允许你在应用程序中使用翻译，并提供对不同语言的支持。"""
USE_I18N = True

"""作用：启用或禁用本地化（Localization，简称 l10n）。
如果设置为 True，Django 将启用本地化，使日期、时间等在显示时符合用户所在地区的惯例。"""
USE_L10N = True

"""作用：启用或禁用时区支持。
如果设置为 True，Django 将使用时区-aware的日期和时间，而不是简单的本地时间"""
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

"""作用：指定在浏览器中访问静态文件的基本 URL。
示例：'/public/' 表示静态文件可以通过 http://yourdomain.com/public/ 访问。"""
STATIC_URL = '/public/'

"""作用：指定项目中使用的用户模型。
示例：'account.User' 表示用户模型的路径为 'account' 应用下的 User 模型"""
AUTH_USER_MODEL = 'account.User'

"""作用：指定测试用例的存储路径。
示例：使用了 os.path.join 将 DATA_DIR 和 "test_case" 连接起来形成完整的路径。"""
TEST_CASE_DIR = os.path.join(DATA_DIR, "test_case")

"""作用：指定日志文件的存储路径。
示例：使用了 os.path.join 将 DATA_DIR 和 "log" 连接起来形成完整的路径"""
LOG_PATH = os.path.join(DATA_DIR, "log")

"""作用：指定用户头像（avatar）的 URL 前缀和上传目录。
示例："/public/avatar" 作为 URL 前缀，f"{DATA_DIR}{AVATAR_URI_PREFIX}" 作为上传目录的完整路径。"""
AVATAR_URI_PREFIX = "/public/avatar"

"""作用：指定上传文件的 URL 前缀和上传目录。
示例："/public/upload" 作为 URL 前缀，f"{DATA_DIR}{UPLOAD_PREFIX}" 作为上传目录的完整路径。"""
AVATAR_UPLOAD_DIR = f"{DATA_DIR}{AVATAR_URI_PREFIX}"

UPLOAD_PREFIX = "/public/upload"

"""指定额外的静态文件目录。
示例：[os.path.join(DATA_DIR, "public")] 表示项目会在 DATA_DIR 下的 "public" 目录中查找静态文件。"""
UPLOAD_DIR = f"{DATA_DIR}{UPLOAD_PREFIX}"

STATICFILES_DIRS = [os.path.join(DATA_DIR, "public")]

"""下面是关于日志的"""
LOGGING_HANDLERS = ['console', 'sentry'] if production_env else ['console']
LOGGING = {
   'version': 1,
   'disable_existing_loggers': False,
   'formatters': {
       'standard': {
           'format': '[%(asctime)s] - [%(levelname)s] - [%(name)s:%(lineno)d]  - %(message)s',
           'datefmt': '%Y-%m-%d %H:%M:%S'
       }
   },
   'handlers': {
       'console': {
           'level': 'DEBUG',
           'class': 'logging.StreamHandler',
           'formatter': 'standard'
       },
       'sentry': {
           'level': 'ERROR',
           'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
           'formatter': 'standard'
       }
   },
   'loggers': {
       'django.request': {
           'handlers': LOGGING_HANDLERS,
           'level': 'ERROR',
           'propagate': True,
       },
       'django.db.backends': {
           'handlers': LOGGING_HANDLERS,
           'level': 'ERROR',
           'propagate': True,
       },
        'dramatiq': {
            'handlers': LOGGING_HANDLERS,
            'level': 'DEBUG',
            'propagate': False,
        },
       '': {
           'handlers': LOGGING_HANDLERS,
           'level': 'WARNING',
           'propagate': True,
       }
   },
}

REST_FRAMEWORK = {
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    )
}

REDIS_URL = "redis://%s:%s" % (REDIS_CONF["host"], REDIS_CONF["port"])


def redis_config(db):
    def make_key(key, key_prefix, version):
        return key

    return {
        "BACKEND": "utils.cache.MyRedisCache",
        "LOCATION": f"{REDIS_URL}/{db}",
        "TIMEOUT": None,
        "KEY_PREFIX": "",
        "KEY_FUNCTION": make_key
    }


CACHES = {
    "default": redis_config(db=1)
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

DRAMATIQ_BROKER = {
    "BROKER": "dramatiq.brokers.redis.RedisBroker",
    "OPTIONS": {
        "url": f"{REDIS_URL}/4",
    },
    "MIDDLEWARE": [
        # "dramatiq.middleware.Prometheus",
        "dramatiq.middleware.AgeLimit",
        "dramatiq.middleware.TimeLimit",
        "dramatiq.middleware.Callbacks",
        "dramatiq.middleware.Retries",
        # "django_dramatiq.middleware.AdminMiddleware",
        "django_dramatiq.middleware.DbConnectionsMiddleware"
    ]
}

DRAMATIQ_RESULT_BACKEND = {
    "BACKEND": "dramatiq.results.backends.redis.RedisBackend",
    "BACKEND_OPTIONS": {
        "url": f"{REDIS_URL}/4",
    },
    "MIDDLEWARE_OPTIONS": {
        "result_ttl": None
    }
}

RAVEN_CONFIG = {
    'dsn': 'https://b200023b8aed4d708fb593c5e0a6ad3d:1fddaba168f84fcf97e0d549faaeaff0@sentry.io/263057'
}

IP_HEADER = "HTTP_X_REAL_IP"

DEFAULT_AUTO_FIELD='django.db.models.AutoField'